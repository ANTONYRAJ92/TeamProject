
resource "aws_instance" "project" {
  ami           = "ami-0f5ee92e2d63afc18" 
    iam_instance_profile = aws_iam_instance_profile.some_profile.name
  instance_type = "t2.micro"
    subnet_id         = aws_subnet.subnet-1.id
   key_name               = "ka-key"
  vpc_security_group_ids = [aws_security_group.elb_sg.id]
 associate_public_ip_address = true
user_data = <<-EOF
#!/bin/bash
   
       sudo apt-get update -y 
       sudo apt  install awscli -y
                 sudo apt-get update -y 
        sudo apt install postgresql -y	
         aws s3 cp s3://kabir-file/pg-hhba.conf /etc/postgresql/14/main/pg_hba.conf
         sudo su postgres -c "psql -U postgres -c \"alter user postgres WITH password 'postgres'\""
         sudo systemctl restart postgresql 

                  EOF
}


resource "aws_s3_bucket" "example" {
  bucket = "kabir-file1"

  tags = {
    Name        = "kabir-file"
    Environment = "Dev"
  }
}

resource "aws_s3_object" "object" {
  bucket = aws_s3_bucket.example.id
  key    = "pg-hhba.conf"
  source = "/home/user/Desktop/pg-hhba.conf"
  etag = filemd5("/home/user/Desktop/pg-hhba.conf")
}


  
	
resource "aws_iam_policy" "bucket_policy" {
  name        = "my-ec2"
  path        = "/"
  description = "Allow "

  policy = jsonencode({
    "Version" : "2012-10-17",
    "Statement" : [
      {
        "Sid" : "VisualEditor0",
        "Effect" : "Allow",
        "Action" : [
          "s3:PutObject",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:DeleteObject"
        ],
        "Resource" : [
          "arn:aws:s3:::*/*",
          "arn:aws:s3:::my-bucket-name"
        ]
      }
    ]
  })
}

resource "aws_iam_role" "ec2_role" {
  name = "ec2-1"

  assume_role_policy = jsonencode({ 

    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Sid    = ""
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      },
    ]
  })
}

resource "aws_iam_role_policy_attachment" "some_bucket_policy" {
  role       = aws_iam_role.ec2_role.name
  policy_arn = aws_iam_policy.bucket_policy.arn
}


resource "aws_iam_instance_profile" "some_profile" {
  name = "office-project-1"
  role = aws_iam_role.ec2_role.name
}



resource "aws_security_group" "elb_sg" {
  name        = "new-project_file-1"
  vpc_id =  aws_vpc.main.id


 
   ingress {
    from_port         = 3000
  to_port           = 3000
  protocol          = "tcp"
  cidr_blocks       = ["0.0.0.0/0"]
  
  }


  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }


  ingress {
    from_port         = 80
  to_port           = 80
  protocol          = "tcp"
  cidr_blocks       = ["0.0.0.0/0"] 
  
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  ingress {
    from_port         = 443 
  to_port           = 443
  protocol          = "tcp"
  cidr_blocks       = ["0.0.0.0/0"]
  
  }


  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }
  
   ingress {
    from_port         = 22
  to_port           = 22
  protocol          = "tcp"
  cidr_blocks       = ["0.0.0.0/0"]
  
  }


  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }
  
}

resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/24"


  tags = {
    Name = "main"
  }
}


resource "aws_lb_target_group" "test" {
  protocol = "HTTP"
  name     = "file-target-group-11"
  port     = 80
  vpc_id  =  aws_vpc.main.id
}



resource "aws_lb_target_group_attachment" "test" {
  target_group_arn = "${aws_lb_target_group.test.arn}"
  target_id        = "${aws_instance.project.id}"
  port             = 80

}


resource "aws_subnet" "subnet-1" {

  availability_zone = "ap-south-1a"
  vpc_id =  aws_vpc.main.id
  cidr_block = "10.0.0.0/26"
}


resource "aws_subnet" "subnet_2" {

  availability_zone = "ap-south-1b"
   vpc_id =  aws_vpc.main.id
  cidr_block = "10.0.0.64/26"
}
resource "aws_lb" "test" {
  name               = "ec2-file-1"
  internal           = false
  load_balancer_type = "application"
  enable_deletion_protection = true
  security_groups = [aws_security_group.elb_sg.id]
  subnets         = [aws_subnet.subnet-1.id,aws_subnet.subnet_2.id]
  tags = {
    Environment = "production"
  }
}

resource "aws_lb_listener" "front_end" {
  load_balancer_arn =  "${aws_lb.test.arn}"
  port              = "80"
  protocol          = "HTTP"
 



  default_action {
    type             = "forward"
    target_group_arn = "${aws_lb_target_group.test.arn}"
  }
}
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "main"
  }
}
resource "aws_route_table" "example" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }
}



resource "aws_route_table_association" "association_subnet1" {
  subnet_id      = aws_subnet.subnet-1.id
  route_table_id = aws_route_table.example.id
}

resource "aws_route_table_association" "association_subnet2" {
  subnet_id      = aws_subnet.subnet_2.id
  route_table_id = aws_route_table.example.id
}


